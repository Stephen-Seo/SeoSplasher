
apply plugin: 'cpp'

if(hasProperty('SFML2_DIR'))
{
    model {
        buildTypes {
            debug
            release
        }

        platforms {
            linux_x86 {
                operatingSystem "linux"
                architecture "x86"
            }
            linux_x86_64 {
                operatingSystem "linux"
                architecture "x86_64"
            }

            windows_x86 {
                operatingSystem "windows"
                architecture "x86"
            }
            windows_x86_64 {
                operatingSystem "windows"
                architecture "x86_64"
            }
        }

        toolChains {
            gcc(Gcc) {
                path "/usr/bin"
                eachPlatform() {
                    cppCompiler.executable "g++"
                }
                target("linux_x86") {
                    cppCompiler.withArguments { List<String> args ->
                        args << "-m32" << "-march=i686" << "-mtune=generic"
                    }
                    linker.withArguments { List<String> args ->
                        args << "-m32"
                    }
                }
                target("linux_x86_64")
            }

            mingw_w64(Gcc) {
                path "/usr/bin"
                eachPlatform() {
                    if(platform == platforms.windows_x86) {
                        cCompiler.executable "i686-w64-mingw32-gcc"
                        cppCompiler.executable "i686-w64-mingw32-g++"
                        linker.executable "i686-w64-mingw32-g++"
                        assembler.executable "i686-w64-mingw32-as"
                        staticLibArchiver.executable "i686-w64-mingw32-ar"
                    }
                    if(platform == platforms.windows_x86_64) {
                        cCompiler.executable "x86_64-w64-mingw32-gcc"
                        cppCompiler.executable "x86_64-w64-mingw32-g++"
                        linker.executable "x86_64-w64-mingw32-g++"
                        assembler.executable "x86_64-w64-mingw32-as"
                        staticLibArchiver.executable "x86_64-w64-mingw32-ar"
                    }
                }
                target("windows_x86")
                target("windows_x86_64")
            }
        }
    }

    executables {
        SeoSplasher {
            targetPlatform "linux_x86", "linux_x86_64"
            if(project.hasProperty('EXTLIBS_DIR')) {
                targetPlatform "windows_x86", "windows_x86_64"
            }

            binaries.all {
                cppCompiler.args "-std=c++11", "-Wall", "-Wextra"
                if(project.hasProperty('SET_RPATH') && (targetPlatform == platforms.linux_x86 || targetPlatform == platforms.linux_x86_64))
                {
                    linker.args "-Xlinker", "-rpath=${SET_RPATH}"
                }

                if(project.hasProperty('ResourcePacker_DIR')) {
                    cppCompiler.define "ResourcePacker_FOUND"
                }

                if(buildType == buildTypes.debug) {
                    cppCompiler.args "-O0", "-g"
                }
                if(buildType == buildTypes.release) {
                    cppCompiler.define "NDEBUG"
                    cppCompiler.args "-O3"
                }
            }
        }
    }

    sources {
        SeoSplasher {
            cpp {
                if(project.hasProperty('ResourcePacker_DIR')) {
                    lib project: ":ResourcePacker", library: "ResourcePacker"
                }
                lib project: ":SFML", library: "sfml-system"
                lib project: ":SFML", library: "sfml-window"
                lib project: ":SFML", library: "sfml-network"
                lib project: ":SFML", library: "sfml-graphics"
                lib project: ":SFML", library: "sfml-audio"
                source {
                    srcDir "${projectDir}/src"
                    include "**/*.cpp"
                    exclude "ec/nMove.cpp"
                }
                exportedHeaders {
                    srcDir "${projectDir}/src"
                    srcDir "${SFML2_DIR}/src/SFML2/headers"
                }
            }
        }
    }
}
else
{
    println "WARNING: SFML game engine builds are unavailable if the"
    println "SFML2_DIR property is undefined!"
}

if(!hasProperty('ResourcePacker_DIR'))
{
    println "WARNING: ResourcePacker_DIR property not defined, will compile"
    println "SFML game engine without it!"
}

